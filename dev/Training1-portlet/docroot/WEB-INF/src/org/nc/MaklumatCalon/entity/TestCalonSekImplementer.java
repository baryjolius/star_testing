/*
 * DO NOT AMMEND THIS FILE. THIS JAVA FILE IS GENERATED BY WIZARD.
 *
 * Created by Coral-J Framework.
 * Author : Ridzuan Mohamad
 * Date   : Fri Jul 06 09:45:16 SGT 2012
 */

package org.nc.MaklumatCalon.entity;

import cjf.daab.ext.util.EntityImplementer;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The implementer for table TEST_CALON_SEK. this implementer give basis function to
 * retrieve the data such base on define primary keys, list all and list according
 * to filtering criteria.
 *
 * <p> Example single entity:
 * <pre>
 * {@code
 * TestCalonSek entityWithAllColumn = implementer.getTestCalonSek(testCalonSek);
 * TestCalonSek entityWithSelectedColumn = implementer.getTestCalonSek(testCalonSek,"COL_1", "COL_2");
 * }
 * </pre>
 * </p>
 *
 * <p> Example list all entities:
 * <pre>
 * {@code
 * List<TestCalonSek> entitiesWithAllColumn = implementer.getTestCalonSeks();
 * List<TestCalonSek> entitiesWithSelectedColumn = implementer.getTestCalonSeks("COL_1", "COL_2");
 * }
 * </pre>
 * </p>
 * 
 * <p> Example list entities using provided parameters:
 * <pre>
 * {@code
 * Map<String, Object> args = new HashMap<String, Object>();
 * args.put("STAFF_SIMPAN",11501);
 * List<TestCalonSek> entitiesWithAllColumn = implementer.getTestCalonSeks(args);
 * List<TestCalonSek> entitiesWithSelectedColumn = implementer.getTestCalonSeks(args,"COL_1", "COL_2");
 * }
 * </pre>
 * </p>
 * 
 * @author Ridzuan Mohamad
 */
public class TestCalonSekImplementer extends EntityImplementer{
	private final static String TABLE_NAME = "TEST_CALON_SEK";
	private final static Class<?> ENTITY_TYPE = TestCalonSek.class;
	public final static String[][] TABLE_COLUMN_MAPPER = {
				{"NoPelajar", "NO_PELAJAR"},
				{"TestCalonId", "TEST_CALON_ID"},
				{"TestCalonSek", "TEST_CALON_SEK"},
				{"TestSekolahPk", "TEST_SEKOLAH_PK"}
		};

	/**
	 * Retrieve entity TestCalonSek based on table TEST_CALON_SEK primary keys.
	 * 
	 * @param testCalonSek referring to field TEST_CALON_SEK
	 * @param columns if ignore all field will be retrieve
	 * @return TestCalonSek
	 * @throws SQLException
	 */
	public TestCalonSek getTestCalonSek(BigDecimal testCalonSek, String... columns) throws SQLException{
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("TEST_CALON_SEK", testCalonSek);
		return (TestCalonSek) getEntity(TABLE_NAME, ENTITY_TYPE, filters, columns);
	}

	/**
	 * Retrieve all defined TestCalonSek from table TEST_CALON_SEK
	 * 
	 * @param columns if ignore all field will be retrieve
	 * @return List<TestCalonSek>
	 * @throws SQLException
	 */
	@SuppressWarnings("unchecked")
	public List<TestCalonSek> getTestCalonSeks(String... columns) throws SQLException{
		return (List<TestCalonSek>) getEntities(TABLE_NAME, ENTITY_TYPE, columns);
	}

	/**
	 * Retrieve list of define TestCalonSek based of filtering criteria
	 * 
	 * @param filters filtering criteria
	 * @param columns if ignore all field will be retrieve
	 * @return List<TestCalonSek>
	 * @throws SQLException
	 */
	@SuppressWarnings("unchecked")
	public List<TestCalonSek> getTestCalonSeks(Map<String, Object> filters, String... columns) throws SQLException{
		return (List<TestCalonSek>) getEntities(TABLE_NAME, ENTITY_TYPE, filters, columns);
	}

	/**
	 * Create new record for TestCalonSek.
	 * 
	 * @param noPelajar referring to field NO_PELAJAR
	 * @param testCalonId referring to field TEST_CALON_ID
	 * @param testCalonSek referring to field TEST_CALON_SEK
	 * @param testSekolahPk referring to field TEST_SEKOLAH_PK
	 * @return int
	 * @throws SQLException
	 */
	public int create(String noPelajar, BigDecimal testCalonId, BigDecimal testCalonSek, BigDecimal testSekolahPk) throws SQLException {
		Map<String, Object> values = new HashMap<String, Object>();
		values.put("NO_PELAJAR", noPelajar);
		values.put("TEST_CALON_ID", testCalonId);
		values.put("TEST_CALON_SEK", testCalonSek);
		values.put("TEST_SEKOLAH_PK", testSekolahPk);
		return createEntities(TABLE_NAME, values);
	}

	/**
	 * Create new record for TestCalonSek.
	 * 
	 * @param testcalonsek
	 * @return int
	 * @throws SQLException
	 */
	public int create(TestCalonSek testcalonsek) throws SQLException {
		Map<String, Object> values = new HashMap<String, Object>();
		values.put("NO_PELAJAR", testcalonsek.getNoPelajar());
		values.put("TEST_CALON_ID", testcalonsek.getTestCalonId());
		values.put("TEST_CALON_SEK", testcalonsek.getTestCalonSek());
		values.put("TEST_SEKOLAH_PK", testcalonsek.getTestSekolahPk());
		return createEntities(TABLE_NAME, values);
	}

	/**
	 * Create list of new record for TestCalonSek.
	 * 
	 * @param List<testcalonsek>
	 * @return int
	 * @throws SQLException
	 */
	public int create(List<TestCalonSek> testcalonseks) throws SQLException{
		int _row = 0;
		for(TestCalonSek testcalonsek : testcalonseks){
			this.create(testcalonsek);
			++_row;
		}
		return _row;
	}

	/**
	 * Update existing record for TestCalonSek using given filtering criteria.
	 * 
	 * @param noPelajar referring to field NO_PELAJAR
	 * @param testCalonId referring to field TEST_CALON_ID
	 * @param testCalonSek referring to field TEST_CALON_SEK
	 * @param testSekolahPk referring to field TEST_SEKOLAH_PK
	 * @return int
	 * @throws SQLException
	 */
	public int update(String noPelajar, BigDecimal testCalonId, BigDecimal testCalonSek, BigDecimal testSekolahPk) throws SQLException {
		Map<String, Object> updates = new HashMap<String, Object>();
		updates.put("NO_PELAJAR", noPelajar);
		updates.put("TEST_CALON_ID", testCalonId);
		updates.put("TEST_SEKOLAH_PK", testSekolahPk);

		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("TEST_CALON_SEK", testCalonSek);
		return updateEntities(TABLE_NAME, updates, filters);
	}

	/**
	 * Update existing record for TestCalonSek using given filtering criteria.
	 * 
	 * @param testcalonsek
	 * @return int
	 * @throws SQLException
	 */
	public int update(TestCalonSek testcalonsek) throws SQLException {
		Map<String, Object> updates = new HashMap<String, Object>();
		updates.put("NO_PELAJAR", testcalonsek.getNoPelajar());
		updates.put("TEST_CALON_ID", testcalonsek.getTestCalonId());
		updates.put("TEST_SEKOLAH_PK", testcalonsek.getTestSekolahPk());

		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("TEST_CALON_SEK", testcalonsek.getTestCalonSek());
		return updateEntities(TABLE_NAME, updates, filters);
	}

	/**
	 * Update list of existing record for TestCalonSek using given filtering criteria.
	 * 
	 * @param List<testcalonsek>
	 * @return int
	 * @throws SQLException
	 */
	public int update(List<TestCalonSek> testcalonseks) throws SQLException{
		int _row = 0;
		for(TestCalonSek testcalonsek : testcalonseks){
			this.update(testcalonsek);
			++_row;
		}
		return _row;
	}

	/**
	 * Remove record for TestCalonSek.
	 * 
	 * @param testcalonsek
	 * @return int
	 * @throws SQLException
	 */
	public int remove(TestCalonSek testcalonsek) throws SQLException{
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("TEST_CALON_SEK", testcalonsek.getTestCalonSek());
		return removeEntities(TABLE_NAME, filters);
	}

	/**
	 * Remove list of record for TestCalonSek.
	 * 
	 * @param List<TestCalonSek>
	 * @return int
	 * @throws SQLException
	 */
	public int remove(List<TestCalonSek> testcalonseks) throws SQLException{
		int _row = 0;
		for(TestCalonSek testcalonsek : testcalonseks){
			this.remove(testcalonsek);
			++_row;
		}
		return _row;
	}

	/**
	 * Remove all records for TestCalonSek.
	 * 
	 * @return int
	 * @throws SQLException
	 */
	public int remove() throws SQLException{
		return removeEntities(TABLE_NAME);
	}

	/**
	 * Remove all records for TestCalonSek using given filtering criteria.
	 * 
	 * @param filters filtering criteria
	 * @return int
	 * @throws SQLException
	 */
	public int remove(Map<String, Object> filters) throws SQLException{
		return removeEntities(TABLE_NAME, filters);
	}

	public String toString(List<TestCalonSek> testcalonseks) {
		StringBuilder sb = new StringBuilder();
		for(TestCalonSek testcalonsek: testcalonseks){
			sb.append(testcalonsek.toString()+",");
		}
		int pos = sb.lastIndexOf(",");
		return "[" + sb.toString().substring(0, pos) + "]";
	}

	public String toJsonString(List<TestCalonSek> testcalonseks) {
		StringBuilder sb = new StringBuilder();
		for(TestCalonSek testcalonsek: testcalonseks){
			sb.append(testcalonsek.toJsonString()+",");
		}
		int pos = sb.lastIndexOf(",");
		return "[" + sb.toString().substring(0, pos) + "]";
	}

	public String toJsonString(List<TestCalonSek> testcalonseks, String elementName) {
		String _name = (elementName.trim().length() > 0 ? elementName : "elements");
		return "{\"" + _name + "\":" + toJsonString(testcalonseks) + "}";
	}
}
/*
 * DO NOT AMMEND THIS FILE. THIS JAVA FILE IS GENERATED BY WIZARD.
 *
 * Created by Coral-J Framework.
 * Author : Ridzuan Mohamad
 * Date   : Fri Jul 06 09:45:17 SGT 2012
 */

package org.nc.MaklumatCalon.entity;

import cjf.daab.ext.util.EntityImplementer;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The implementer for table TEST_SEKOLAH. this implementer give basis function to
 * retrieve the data such base on define primary keys, list all and list according
 * to filtering criteria.
 *
 * <p> Example single entity:
 * <pre>
 * {@code
 * TestSekolah entityWithAllColumn = implementer.getTestSekolah(testSekolahPk);
 * TestSekolah entityWithSelectedColumn = implementer.getTestSekolah(testSekolahPk,"COL_1", "COL_2");
 * }
 * </pre>
 * </p>
 *
 * <p> Example list all entities:
 * <pre>
 * {@code
 * List<TestSekolah> entitiesWithAllColumn = implementer.getTestSekolahs();
 * List<TestSekolah> entitiesWithSelectedColumn = implementer.getTestSekolahs("COL_1", "COL_2");
 * }
 * </pre>
 * </p>
 * 
 * <p> Example list entities using provided parameters:
 * <pre>
 * {@code
 * Map<String, Object> args = new HashMap<String, Object>();
 * args.put("STAFF_SIMPAN",11501);
 * List<TestSekolah> entitiesWithAllColumn = implementer.getTestSekolahs(args);
 * List<TestSekolah> entitiesWithSelectedColumn = implementer.getTestSekolahs(args,"COL_1", "COL_2");
 * }
 * </pre>
 * </p>
 * 
 * @author Ridzuan Mohamad
 */
public class TestSekolahImplementer extends EntityImplementer{
	private final static String TABLE_NAME = "TEST_SEKOLAH";
	private final static Class<?> ENTITY_TYPE = TestSekolah.class;
	public final static String[][] TABLE_COLUMN_MAPPER = {
				{"NamaSekolah", "NAMA_SEKOLAH"},
				{"NegeriPk", "NEGERI_PK"},
				{"TestSekolahPk", "TEST_SEKOLAH_PK"}
		};

	/**
	 * Retrieve entity TestSekolah based on table TEST_SEKOLAH primary keys.
	 * 
	 * @param testSekolahPk referring to field TEST_SEKOLAH_PK
	 * @param columns if ignore all field will be retrieve
	 * @return TestSekolah
	 * @throws SQLException
	 */
	public TestSekolah getTestSekolah(BigDecimal testSekolahPk, String... columns) throws SQLException{
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("TEST_SEKOLAH_PK", testSekolahPk);
		return (TestSekolah) getEntity(TABLE_NAME, ENTITY_TYPE, filters, columns);
	}

	/**
	 * Retrieve all defined TestSekolah from table TEST_SEKOLAH
	 * 
	 * @param columns if ignore all field will be retrieve
	 * @return List<TestSekolah>
	 * @throws SQLException
	 */
	@SuppressWarnings("unchecked")
	public List<TestSekolah> getTestSekolahs(String... columns) throws SQLException{
		return (List<TestSekolah>) getEntities(TABLE_NAME, ENTITY_TYPE, columns);
	}

	/**
	 * Retrieve list of define TestSekolah based of filtering criteria
	 * 
	 * @param filters filtering criteria
	 * @param columns if ignore all field will be retrieve
	 * @return List<TestSekolah>
	 * @throws SQLException
	 */
	@SuppressWarnings("unchecked")
	public List<TestSekolah> getTestSekolahs(Map<String, Object> filters, String... columns) throws SQLException{
		return (List<TestSekolah>) getEntities(TABLE_NAME, ENTITY_TYPE, filters, columns);
	}

	/**
	 * Create new record for TestSekolah.
	 * 
	 * @param namaSekolah referring to field NAMA_SEKOLAH
	 * @param negeriPk referring to field NEGERI_PK
	 * @param testSekolahPk referring to field TEST_SEKOLAH_PK
	 * @return int
	 * @throws SQLException
	 */
	public int create(String namaSekolah, String negeriPk, BigDecimal testSekolahPk) throws SQLException {
		Map<String, Object> values = new HashMap<String, Object>();
		values.put("NAMA_SEKOLAH", namaSekolah);
		values.put("NEGERI_PK", negeriPk);
		values.put("TEST_SEKOLAH_PK", testSekolahPk);
		return createEntities(TABLE_NAME, values);
	}

	/**
	 * Create new record for TestSekolah.
	 * 
	 * @param testsekolah
	 * @return int
	 * @throws SQLException
	 */
	public int create(TestSekolah testsekolah) throws SQLException {
		Map<String, Object> values = new HashMap<String, Object>();
		values.put("NAMA_SEKOLAH", testsekolah.getNamaSekolah());
		values.put("NEGERI_PK", testsekolah.getNegeriPk());
		values.put("TEST_SEKOLAH_PK", testsekolah.getTestSekolahPk());
		return createEntities(TABLE_NAME, values);
	}

	/**
	 * Create list of new record for TestSekolah.
	 * 
	 * @param List<testsekolah>
	 * @return int
	 * @throws SQLException
	 */
	public int create(List<TestSekolah> testsekolahs) throws SQLException{
		int _row = 0;
		for(TestSekolah testsekolah : testsekolahs){
			this.create(testsekolah);
			++_row;
		}
		return _row;
	}

	/**
	 * Update existing record for TestSekolah using given filtering criteria.
	 * 
	 * @param namaSekolah referring to field NAMA_SEKOLAH
	 * @param negeriPk referring to field NEGERI_PK
	 * @param testSekolahPk referring to field TEST_SEKOLAH_PK
	 * @return int
	 * @throws SQLException
	 */
	public int update(String namaSekolah, String negeriPk, BigDecimal testSekolahPk) throws SQLException {
		Map<String, Object> updates = new HashMap<String, Object>();
		updates.put("NAMA_SEKOLAH", namaSekolah);
		updates.put("NEGERI_PK", negeriPk);

		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("TEST_SEKOLAH_PK", testSekolahPk);
		return updateEntities(TABLE_NAME, updates, filters);
	}

	/**
	 * Update existing record for TestSekolah using given filtering criteria.
	 * 
	 * @param testsekolah
	 * @return int
	 * @throws SQLException
	 */
	public int update(TestSekolah testsekolah) throws SQLException {
		Map<String, Object> updates = new HashMap<String, Object>();
		updates.put("NAMA_SEKOLAH", testsekolah.getNamaSekolah());
		updates.put("NEGERI_PK", testsekolah.getNegeriPk());

		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("TEST_SEKOLAH_PK", testsekolah.getTestSekolahPk());
		return updateEntities(TABLE_NAME, updates, filters);
	}

	/**
	 * Update list of existing record for TestSekolah using given filtering criteria.
	 * 
	 * @param List<testsekolah>
	 * @return int
	 * @throws SQLException
	 */
	public int update(List<TestSekolah> testsekolahs) throws SQLException{
		int _row = 0;
		for(TestSekolah testsekolah : testsekolahs){
			this.update(testsekolah);
			++_row;
		}
		return _row;
	}

	/**
	 * Remove record for TestSekolah.
	 * 
	 * @param testsekolah
	 * @return int
	 * @throws SQLException
	 */
	public int remove(TestSekolah testsekolah) throws SQLException{
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("TEST_SEKOLAH_PK", testsekolah.getTestSekolahPk());
		return removeEntities(TABLE_NAME, filters);
	}

	/**
	 * Remove list of record for TestSekolah.
	 * 
	 * @param List<TestSekolah>
	 * @return int
	 * @throws SQLException
	 */
	public int remove(List<TestSekolah> testsekolahs) throws SQLException{
		int _row = 0;
		for(TestSekolah testsekolah : testsekolahs){
			this.remove(testsekolah);
			++_row;
		}
		return _row;
	}

	/**
	 * Remove all records for TestSekolah.
	 * 
	 * @return int
	 * @throws SQLException
	 */
	public int remove() throws SQLException{
		return removeEntities(TABLE_NAME);
	}

	/**
	 * Remove all records for TestSekolah using given filtering criteria.
	 * 
	 * @param filters filtering criteria
	 * @return int
	 * @throws SQLException
	 */
	public int remove(Map<String, Object> filters) throws SQLException{
		return removeEntities(TABLE_NAME, filters);
	}

	public String toString(List<TestSekolah> testsekolahs) {
		StringBuilder sb = new StringBuilder();
		for(TestSekolah testsekolah: testsekolahs){
			sb.append(testsekolah.toString()+",");
		}
		int pos = sb.lastIndexOf(",");
		return "[" + sb.toString().substring(0, pos) + "]";
	}

	public String toJsonString(List<TestSekolah> testsekolahs) {
		StringBuilder sb = new StringBuilder();
		for(TestSekolah testsekolah: testsekolahs){
			sb.append(testsekolah.toJsonString()+",");
		}
		int pos = sb.lastIndexOf(",");
		return "[" + sb.toString().substring(0, pos) + "]";
	}

	public String toJsonString(List<TestSekolah> testsekolahs, String elementName) {
		String _name = (elementName.trim().length() > 0 ? elementName : "elements");
		return "{\"" + _name + "\":" + toJsonString(testsekolahs) + "}";
	}
}
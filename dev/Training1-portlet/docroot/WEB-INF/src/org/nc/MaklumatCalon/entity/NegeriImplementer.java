/*
 * DO NOT AMMEND THIS FILE. THIS JAVA FILE IS GENERATED BY WIZARD.
 *
 * Created by Coral-J Framework.
 * Author : Ridzuan Mohamad
 * Date   : Fri Jul 06 09:45:16 SGT 2012
 */

package org.nc.MaklumatCalon.entity;

import cjf.daab.ext.util.EntityImplementer;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The implementer for table NEGERI. this implementer give basis function to
 * retrieve the data such base on define primary keys, list all and list according
 * to filtering criteria.
 *
 * <p> Example single entity:
 * <pre>
 * {@code
 * Negeri entityWithAllColumn = implementer.getNegeri(negeriKodPk);
 * Negeri entityWithSelectedColumn = implementer.getNegeri(negeriKodPk,"COL_1", "COL_2");
 * }
 * </pre>
 * </p>
 *
 * <p> Example list all entities:
 * <pre>
 * {@code
 * List<Negeri> entitiesWithAllColumn = implementer.getNegeris();
 * List<Negeri> entitiesWithSelectedColumn = implementer.getNegeris("COL_1", "COL_2");
 * }
 * </pre>
 * </p>
 * 
 * <p> Example list entities using provided parameters:
 * <pre>
 * {@code
 * Map<String, Object> args = new HashMap<String, Object>();
 * args.put("STAFF_SIMPAN",11501);
 * List<Negeri> entitiesWithAllColumn = implementer.getNegeris(args);
 * List<Negeri> entitiesWithSelectedColumn = implementer.getNegeris(args,"COL_1", "COL_2");
 * }
 * </pre>
 * </p>
 * 
 * @author Ridzuan Mohamad
 */
public class NegeriImplementer extends EntityImplementer{
	private final static String TABLE_NAME = "NEGERI";
	private final static Class<?> ENTITY_TYPE = Negeri.class;
	public final static String[][] TABLE_COLUMN_MAPPER = {
				{"NegeriKod2", "NEGERI_KOD_2"},
				{"NegeriKodPk", "NEGERI_KOD_PK"},
				{"NegeriNama", "NEGERI_NAMA"},
				{"NegeriOrder", "NEGERI_ORDER"},
				{"NegeriTel", "NEGERI_TEL"},
				{"StaffKemaskini", "STAFF_KEMASKINI"},
				{"StaffSimpan", "STAFF_SIMPAN"},
				{"TkhKemaskini", "TKH_KEMASKINI"},
				{"TkhMigrasi", "TKH_MIGRASI"},
				{"TkhSimpan", "TKH_SIMPAN"}
		};

	/**
	 * Retrieve entity Negeri based on table NEGERI primary keys.
	 * 
	 * @param negeriKodPk referring to field NEGERI_KOD_PK
	 * @param columns if ignore all field will be retrieve
	 * @return Negeri
	 * @throws SQLException
	 */
	public Negeri getNegeri(String negeriKodPk, String... columns) throws SQLException{
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("NEGERI_KOD_PK", negeriKodPk);
		return (Negeri) getEntity(TABLE_NAME, ENTITY_TYPE, filters, columns);
	}

	/**
	 * Retrieve all defined Negeri from table NEGERI
	 * 
	 * @param columns if ignore all field will be retrieve
	 * @return List<Negeri>
	 * @throws SQLException
	 */
	@SuppressWarnings("unchecked")
	public List<Negeri> getNegeris(String... columns) throws SQLException{
		return (List<Negeri>) getEntities(TABLE_NAME, ENTITY_TYPE, columns);
	}

	/**
	 * Retrieve list of define Negeri based of filtering criteria
	 * 
	 * @param filters filtering criteria
	 * @param columns if ignore all field will be retrieve
	 * @return List<Negeri>
	 * @throws SQLException
	 */
	@SuppressWarnings("unchecked")
	public List<Negeri> getNegeris(Map<String, Object> filters, String... columns) throws SQLException{
		return (List<Negeri>) getEntities(TABLE_NAME, ENTITY_TYPE, filters, columns);
	}

	/**
	 * Create new record for Negeri.
	 * 
	 * @param negeriKod2 referring to field NEGERI_KOD_2
	 * @param negeriKodPk referring to field NEGERI_KOD_PK
	 * @param negeriNama referring to field NEGERI_NAMA
	 * @param negeriOrder referring to field NEGERI_ORDER
	 * @param negeriTel referring to field NEGERI_TEL
	 * @param staffKemaskini referring to field STAFF_KEMASKINI
	 * @param staffSimpan referring to field STAFF_SIMPAN
	 * @param tkhKemaskini referring to field TKH_KEMASKINI
	 * @param tkhMigrasi referring to field TKH_MIGRASI
	 * @param tkhSimpan referring to field TKH_SIMPAN
	 * @return int
	 * @throws SQLException
	 */
	public int create(String negeriKod2, String negeriKodPk, String negeriNama, String negeriOrder, String negeriTel, String staffKemaskini, String staffSimpan, Calendar tkhKemaskini, Calendar tkhMigrasi, Calendar tkhSimpan) throws SQLException {
		Map<String, Object> values = new HashMap<String, Object>();
		values.put("NEGERI_KOD_2", negeriKod2);
		values.put("NEGERI_KOD_PK", negeriKodPk);
		values.put("NEGERI_NAMA", negeriNama);
		values.put("NEGERI_ORDER", negeriOrder);
		values.put("NEGERI_TEL", negeriTel);
		values.put("STAFF_KEMASKINI", staffKemaskini);
		values.put("STAFF_SIMPAN", staffSimpan);
		values.put("TKH_KEMASKINI", tkhKemaskini);
		values.put("TKH_MIGRASI", tkhMigrasi);
		values.put("TKH_SIMPAN", tkhSimpan);
		return createEntities(TABLE_NAME, values);
	}

	/**
	 * Create new record for Negeri.
	 * 
	 * @param negeri
	 * @return int
	 * @throws SQLException
	 */
	public int create(Negeri negeri) throws SQLException {
		Map<String, Object> values = new HashMap<String, Object>();
		values.put("NEGERI_KOD_2", negeri.getNegeriKod2());
		values.put("NEGERI_KOD_PK", negeri.getNegeriKodPk());
		values.put("NEGERI_NAMA", negeri.getNegeriNama());
		values.put("NEGERI_ORDER", negeri.getNegeriOrder());
		values.put("NEGERI_TEL", negeri.getNegeriTel());
		values.put("STAFF_KEMASKINI", negeri.getStaffKemaskini());
		values.put("STAFF_SIMPAN", negeri.getStaffSimpan());
		values.put("TKH_KEMASKINI", negeri.getTkhKemaskini());
		values.put("TKH_MIGRASI", negeri.getTkhMigrasi());
		values.put("TKH_SIMPAN", negeri.getTkhSimpan());
		return createEntities(TABLE_NAME, values);
	}

	/**
	 * Create list of new record for Negeri.
	 * 
	 * @param List<negeri>
	 * @return int
	 * @throws SQLException
	 */
	public int create(List<Negeri> negeris) throws SQLException{
		int _row = 0;
		for(Negeri negeri : negeris){
			this.create(negeri);
			++_row;
		}
		return _row;
	}

	/**
	 * Update existing record for Negeri using given filtering criteria.
	 * 
	 * @param negeriKod2 referring to field NEGERI_KOD_2
	 * @param negeriKodPk referring to field NEGERI_KOD_PK
	 * @param negeriNama referring to field NEGERI_NAMA
	 * @param negeriOrder referring to field NEGERI_ORDER
	 * @param negeriTel referring to field NEGERI_TEL
	 * @param staffKemaskini referring to field STAFF_KEMASKINI
	 * @param staffSimpan referring to field STAFF_SIMPAN
	 * @param tkhKemaskini referring to field TKH_KEMASKINI
	 * @param tkhMigrasi referring to field TKH_MIGRASI
	 * @param tkhSimpan referring to field TKH_SIMPAN
	 * @return int
	 * @throws SQLException
	 */
	public int update(String negeriKod2, String negeriKodPk, String negeriNama, String negeriOrder, String negeriTel, String staffKemaskini, String staffSimpan, Calendar tkhKemaskini, Calendar tkhMigrasi, Calendar tkhSimpan) throws SQLException {
		Map<String, Object> updates = new HashMap<String, Object>();
		updates.put("NEGERI_KOD_2", negeriKod2);
		updates.put("NEGERI_NAMA", negeriNama);
		updates.put("NEGERI_ORDER", negeriOrder);
		updates.put("NEGERI_TEL", negeriTel);
		updates.put("STAFF_KEMASKINI", staffKemaskini);
		updates.put("STAFF_SIMPAN", staffSimpan);
		updates.put("TKH_KEMASKINI", tkhKemaskini);
		updates.put("TKH_MIGRASI", tkhMigrasi);
		updates.put("TKH_SIMPAN", tkhSimpan);

		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("NEGERI_KOD_PK", negeriKodPk);
		return updateEntities(TABLE_NAME, updates, filters);
	}

	/**
	 * Update existing record for Negeri using given filtering criteria.
	 * 
	 * @param negeri
	 * @return int
	 * @throws SQLException
	 */
	public int update(Negeri negeri) throws SQLException {
		Map<String, Object> updates = new HashMap<String, Object>();
		updates.put("NEGERI_KOD_2", negeri.getNegeriKod2());
		updates.put("NEGERI_NAMA", negeri.getNegeriNama());
		updates.put("NEGERI_ORDER", negeri.getNegeriOrder());
		updates.put("NEGERI_TEL", negeri.getNegeriTel());
		updates.put("STAFF_KEMASKINI", negeri.getStaffKemaskini());
		updates.put("STAFF_SIMPAN", negeri.getStaffSimpan());
		updates.put("TKH_KEMASKINI", negeri.getTkhKemaskini());
		updates.put("TKH_MIGRASI", negeri.getTkhMigrasi());
		updates.put("TKH_SIMPAN", negeri.getTkhSimpan());

		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("NEGERI_KOD_PK", negeri.getNegeriKodPk());
		return updateEntities(TABLE_NAME, updates, filters);
	}

	/**
	 * Update list of existing record for Negeri using given filtering criteria.
	 * 
	 * @param List<negeri>
	 * @return int
	 * @throws SQLException
	 */
	public int update(List<Negeri> negeris) throws SQLException{
		int _row = 0;
		for(Negeri negeri : negeris){
			this.update(negeri);
			++_row;
		}
		return _row;
	}

	/**
	 * Remove record for Negeri.
	 * 
	 * @param negeri
	 * @return int
	 * @throws SQLException
	 */
	public int remove(Negeri negeri) throws SQLException{
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("NEGERI_KOD_PK", negeri.getNegeriKodPk());
		return removeEntities(TABLE_NAME, filters);
	}

	/**
	 * Remove list of record for Negeri.
	 * 
	 * @param List<Negeri>
	 * @return int
	 * @throws SQLException
	 */
	public int remove(List<Negeri> negeris) throws SQLException{
		int _row = 0;
		for(Negeri negeri : negeris){
			this.remove(negeri);
			++_row;
		}
		return _row;
	}

	/**
	 * Remove all records for Negeri.
	 * 
	 * @return int
	 * @throws SQLException
	 */
	public int remove() throws SQLException{
		return removeEntities(TABLE_NAME);
	}

	/**
	 * Remove all records for Negeri using given filtering criteria.
	 * 
	 * @param filters filtering criteria
	 * @return int
	 * @throws SQLException
	 */
	public int remove(Map<String, Object> filters) throws SQLException{
		return removeEntities(TABLE_NAME, filters);
	}

	public String toString(List<Negeri> negeris) {
		StringBuilder sb = new StringBuilder();
		for(Negeri negeri: negeris){
			sb.append(negeri.toString()+",");
		}
		int pos = sb.lastIndexOf(",");
		return "[" + sb.toString().substring(0, pos) + "]";
	}

	public String toJsonString(List<Negeri> negeris) {
		StringBuilder sb = new StringBuilder();
		for(Negeri negeri: negeris){
			sb.append(negeri.toJsonString()+",");
		}
		int pos = sb.lastIndexOf(",");
		return "[" + sb.toString().substring(0, pos) + "]";
	}

	public String toJsonString(List<Negeri> negeris, String elementName) {
		String _name = (elementName.trim().length() > 0 ? elementName : "elements");
		return "{\"" + _name + "\":" + toJsonString(negeris) + "}";
	}
}
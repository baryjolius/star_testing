/*
 * DO NOT AMMEND THIS FILE. THIS JAVA FILE IS GENERATED BY WIZARD.
 *
 * Created by Coral-J Framework.
 * Author : Ridzuan Mohamad
 * Date   : Fri Jul 06 09:45:16 SGT 2012
 */

package org.nc.MaklumatCalon.entity;

import cjf.daab.ext.util.EntityImplementer;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The implementer for table TEST_CALON. this implementer give basis function to
 * retrieve the data such base on define primary keys, list all and list according
 * to filtering criteria.
 *
 * <p> Example single entity:
 * <pre>
 * {@code
 * TestCalon entityWithAllColumn = implementer.getTestCalon(testCalonId);
 * TestCalon entityWithSelectedColumn = implementer.getTestCalon(testCalonId,"COL_1", "COL_2");
 * }
 * </pre>
 * </p>
 *
 * <p> Example list all entities:
 * <pre>
 * {@code
 * List<TestCalon> entitiesWithAllColumn = implementer.getTestCalons();
 * List<TestCalon> entitiesWithSelectedColumn = implementer.getTestCalons("COL_1", "COL_2");
 * }
 * </pre>
 * </p>
 * 
 * <p> Example list entities using provided parameters:
 * <pre>
 * {@code
 * Map<String, Object> args = new HashMap<String, Object>();
 * args.put("STAFF_SIMPAN",11501);
 * List<TestCalon> entitiesWithAllColumn = implementer.getTestCalons(args);
 * List<TestCalon> entitiesWithSelectedColumn = implementer.getTestCalons(args,"COL_1", "COL_2");
 * }
 * </pre>
 * </p>
 * 
 * @author Ridzuan Mohamad
 */
public class TestCalonImplementer extends EntityImplementer{
	private final static String TABLE_NAME = "TEST_CALON";
	private final static Class<?> ENTITY_TYPE = TestCalon.class;
	public final static String[][] TABLE_COLUMN_MAPPER = {
				{"Nama", "NAMA"},
				{"NamaSamaran", "NAMA_SAMARAN"},
				{"Nokp", "NOKP"},
				{"TestCalonId", "TEST_CALON_ID"}
		};

	/**
	 * Retrieve entity TestCalon based on table TEST_CALON primary keys.
	 * 
	 * @param testCalonId referring to field TEST_CALON_ID
	 * @param columns if ignore all field will be retrieve
	 * @return TestCalon
	 * @throws SQLException
	 */
	public TestCalon getTestCalon(BigDecimal testCalonId, String... columns) throws SQLException{
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("TEST_CALON_ID", testCalonId);
		return (TestCalon) getEntity(TABLE_NAME, ENTITY_TYPE, filters, columns);
	}

	/**
	 * Retrieve all defined TestCalon from table TEST_CALON
	 * 
	 * @param columns if ignore all field will be retrieve
	 * @return List<TestCalon>
	 * @throws SQLException
	 */
	@SuppressWarnings("unchecked")
	public List<TestCalon> getTestCalons(String... columns) throws SQLException{
		return (List<TestCalon>) getEntities(TABLE_NAME, ENTITY_TYPE, columns);
	}

	/**
	 * Retrieve list of define TestCalon based of filtering criteria
	 * 
	 * @param filters filtering criteria
	 * @param columns if ignore all field will be retrieve
	 * @return List<TestCalon>
	 * @throws SQLException
	 */
	@SuppressWarnings("unchecked")
	public List<TestCalon> getTestCalons(Map<String, Object> filters, String... columns) throws SQLException{
		return (List<TestCalon>) getEntities(TABLE_NAME, ENTITY_TYPE, filters, columns);
	}

	/**
	 * Create new record for TestCalon.
	 * 
	 * @param nama referring to field NAMA
	 * @param namaSamaran referring to field NAMA_SAMARAN
	 * @param nokp referring to field NOKP
	 * @param testCalonId referring to field TEST_CALON_ID
	 * @return int
	 * @throws SQLException
	 */
	public int create(String nama, String namaSamaran, String nokp, BigDecimal testCalonId) throws SQLException {
		Map<String, Object> values = new HashMap<String, Object>();
		values.put("NAMA", nama);
		values.put("NAMA_SAMARAN", namaSamaran);
		values.put("NOKP", nokp);
		values.put("TEST_CALON_ID", testCalonId);
		return createEntities(TABLE_NAME, values);
	}

	/**
	 * Create new record for TestCalon.
	 * 
	 * @param testcalon
	 * @return int
	 * @throws SQLException
	 */
	public int create(TestCalon testcalon) throws SQLException {
		Map<String, Object> values = new HashMap<String, Object>();
		values.put("NAMA", testcalon.getNama());
		values.put("NAMA_SAMARAN", testcalon.getNamaSamaran());
		values.put("NOKP", testcalon.getNokp());
		values.put("TEST_CALON_ID", testcalon.getTestCalonId());
		return createEntities(TABLE_NAME, values);
	}

	/**
	 * Create list of new record for TestCalon.
	 * 
	 * @param List<testcalon>
	 * @return int
	 * @throws SQLException
	 */
	public int create(List<TestCalon> testcalons) throws SQLException{
		int _row = 0;
		for(TestCalon testcalon : testcalons){
			this.create(testcalon);
			++_row;
		}
		return _row;
	}

	/**
	 * Update existing record for TestCalon using given filtering criteria.
	 * 
	 * @param nama referring to field NAMA
	 * @param namaSamaran referring to field NAMA_SAMARAN
	 * @param nokp referring to field NOKP
	 * @param testCalonId referring to field TEST_CALON_ID
	 * @return int
	 * @throws SQLException
	 */
	public int update(String nama, String namaSamaran, String nokp, BigDecimal testCalonId) throws SQLException {
		Map<String, Object> updates = new HashMap<String, Object>();
		updates.put("NAMA", nama);
		updates.put("NAMA_SAMARAN", namaSamaran);
		updates.put("NOKP", nokp);

		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("TEST_CALON_ID", testCalonId);
		return updateEntities(TABLE_NAME, updates, filters);
	}

	/**
	 * Update existing record for TestCalon using given filtering criteria.
	 * 
	 * @param testcalon
	 * @return int
	 * @throws SQLException
	 */
	public int update(TestCalon testcalon) throws SQLException {
		Map<String, Object> updates = new HashMap<String, Object>();
		updates.put("NAMA", testcalon.getNama());
		updates.put("NAMA_SAMARAN", testcalon.getNamaSamaran());
		updates.put("NOKP", testcalon.getNokp());

		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("TEST_CALON_ID", testcalon.getTestCalonId());
		return updateEntities(TABLE_NAME, updates, filters);
	}

	/**
	 * Update list of existing record for TestCalon using given filtering criteria.
	 * 
	 * @param List<testcalon>
	 * @return int
	 * @throws SQLException
	 */
	public int update(List<TestCalon> testcalons) throws SQLException{
		int _row = 0;
		for(TestCalon testcalon : testcalons){
			this.update(testcalon);
			++_row;
		}
		return _row;
	}

	/**
	 * Remove record for TestCalon.
	 * 
	 * @param testcalon
	 * @return int
	 * @throws SQLException
	 */
	public int remove(TestCalon testcalon) throws SQLException{
		Map<String, Object> filters = new HashMap<String, Object>();
		filters.put("TEST_CALON_ID", testcalon.getTestCalonId());
		return removeEntities(TABLE_NAME, filters);
	}

	/**
	 * Remove list of record for TestCalon.
	 * 
	 * @param List<TestCalon>
	 * @return int
	 * @throws SQLException
	 */
	public int remove(List<TestCalon> testcalons) throws SQLException{
		int _row = 0;
		for(TestCalon testcalon : testcalons){
			this.remove(testcalon);
			++_row;
		}
		return _row;
	}

	/**
	 * Remove all records for TestCalon.
	 * 
	 * @return int
	 * @throws SQLException
	 */
	public int remove() throws SQLException{
		return removeEntities(TABLE_NAME);
	}

	/**
	 * Remove all records for TestCalon using given filtering criteria.
	 * 
	 * @param filters filtering criteria
	 * @return int
	 * @throws SQLException
	 */
	public int remove(Map<String, Object> filters) throws SQLException{
		return removeEntities(TABLE_NAME, filters);
	}

	public String toString(List<TestCalon> testcalons) {
		StringBuilder sb = new StringBuilder();
		for(TestCalon testcalon: testcalons){
			sb.append(testcalon.toString()+",");
		}
		int pos = sb.lastIndexOf(",");
		return "[" + sb.toString().substring(0, pos) + "]";
	}

	public String toJsonString(List<TestCalon> testcalons) {
		StringBuilder sb = new StringBuilder();
		for(TestCalon testcalon: testcalons){
			sb.append(testcalon.toJsonString()+",");
		}
		int pos = sb.lastIndexOf(",");
		return "[" + sb.toString().substring(0, pos) + "]";
	}

	public String toJsonString(List<TestCalon> testcalons, String elementName) {
		String _name = (elementName.trim().length() > 0 ? elementName : "elements");
		return "{\"" + _name + "\":" + toJsonString(testcalons) + "}";
	}
}